[versions]
activityCompose = "1.9.0"
coil = "2.6.0"
coilCompose = "2.6.0"
composeNavigation = "2.7.7"
constraintlayoutCompose = "1.0.1"
gradleplugin = "8.2.2"
guava = "31.0.1-android"
kotlin = "2.0.0"
devtools = "2.0.0-1.0.21"
serialization = "1.9.21"
androidxCore = "1.13.1"
androidxAppcompat = "1.7.0"
lifecycle = "2.8.2"
startup = "1.1.1"
worker = "2.9.0"
androidxMaterial = "1.2.1"
junit = "4.13.2"
assert = "3.24.2"
mockk = "1.13.8"
testCoroutines = "1.7.3"
androidJunit = "1.1.5"
espresso = "3.5.1"
lottie = "6.1.0"
picasso = "2.71828"
storage = "1.1.0-alpha06"
daraStorage = "1.1.1"
room = "2.6.1"
roomCoroutines = "2.6.1"
roomCompile = "2.6.1"
timber = "5.0.1"
slf4j = "2.0.9"
composeBom = "2024.05.00"
material = "1.12.0"
hiltAndroid = "2.51.1"
moshi = "1.14.0"
okhhtp = "4.9.3"
retrofit = "2.9.0"
retrofitInt = "4.10.0"
hiltExt = "1.3.0"
hiltNavigation = "1.2.0"
logcat = "0.1"
constraintlayout = "2.1.4"

[libraries]
coil = { module = "io.coil-kt:coil", version.ref = "coil" }
coil-compose = { module = "io.coil-kt:coil-compose", version.ref = "coilCompose" }
constraintlayout-compose = { module = "androidx.constraintlayout:constraintlayout-compose", version.ref = "constraintlayoutCompose" }
coreKtx = { module = "androidx.core:core-ktx", version.ref = "androidxCore" }
appcompat = { module = "androidx.appcompat:appcompat", version.ref = "androidxAppcompat" }
lifecycle = { module = "androidx.lifecycle:lifecycle-process", version.ref = "lifecycle" }
lifecycleRuntime = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycle" }
startup = { module = "androidx.startup:startup-runtime", version.ref = "startup" }
worker = { module = "androidx.work:work-runtime-ktx", version.ref = "worker" }
material = { module = "androidx.compose.material3:material3", version.ref = "androidxMaterial" }
junit = { module = "junit:junit", version.ref = "junit" }
assert = { module = "org.assertj:assertj-core", version.ref = "assert" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
testCoroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "testCoroutines" }
androidJunit = { module = "androidx.test.ext:junit", version.ref = "androidJunit" }
espresso = { module = "androidx.test.espresso:espresso-core", version.ref = "espresso" }
composeUITest = { module = "androidx.compose.ui:ui-test-junit4" }

#compose
composeBom = { module = "androidx.compose:compose-bom", version.ref = "composeBom" }
activityCompose = { module = "androidx.activity:activity-compose", version.ref = "activityCompose" }
composeNavigation = { module = "androidx.navigation:navigation-compose", version.ref = "composeNavigation" }
composeUI = { module = "androidx.compose.ui:ui" }
composeUIGraphics = { module = "androidx.compose.ui:ui-graphics" }
composeUIPreview = { module = "androidx.compose.ui:ui-tooling-preview" }
composeUITooling = { module = "androidx.compose.ui:ui-tooling" }
composeUITestManifest = { module = "androidx.compose.ui:ui-test-manifest" }

# animations
lottie = { module = "com.airbnb.android:lottie", version.ref = "lottie" }

# ui
picasso = { module = "com.squareup.picasso:picasso", version.ref = "picasso" }

# storage
#storage = { module="androidx.security:security-crypto", version.ref = "storage"}
storage = { module = "androidx.datastore:datastore-preferences", version.ref = "daraStorage" }


# storage
room = { module = "androidx.room:room-runtime", version.ref = "room" }
roomCoroutines = { module = "androidx.room:room-ktx", version.ref = "roomCoroutines" }
roomKsp = { module = "androidx.room:room-compiler", version.ref = "roomCompile" }
#roomAnnotations = { module = "androidx.room:room-compiler", version.ref = "room" }

# logging
timber = { module = "com.jakewharton.timber:timber", version.ref = "timber" }
slf4j = { module = "org.slf4j:slf4j-simple", version.ref = "slf4j" }
logcat = { module = "com.squareup.logcat:logcat", version.ref = "logcat" }


com-google-android-material-material = { group = "com.google.android.material", name = "material", version.ref = "material" }

#hilt
hiltAndroid = { module = "com.google.dagger:hilt-android", version.ref = "hiltAndroid" }
hiltCompiler = { module = "com.google.dagger:hilt-compiler", version.ref = "hiltAndroid" }
hiltNavigation = { module = "androidx.hilt:hilt-navigation-compose", version.ref = "hiltNavigation" }
hiltExtensions = { module = "it.czerwinski.android.hilt:hilt-extensions", version.ref = "hiltExt" }
hiltProcessor = { module = "it.czerwinski.android.hilt:hilt-processor", version.ref = "hiltExt" }

#moshi
moshi = { module = "com.squareup.moshi:moshi", version.ref = "moshi" }
moshiCodegen = { module = "com.squareup.moshi:moshi-kotlin-codegen", version.ref = "moshi" }

#okhhtp
okhhtpBom = { module = "com.squareup.okhttp3:okhttp-bom", version.ref = "okhhtp" }
okhhtp = { module = "com.squareup.okhttp3:okhttp" }
okhhtpLoggingInterceptor = { module = "com.squareup.okhttp3:logging-interceptor" , version.ref = "retrofitInt"}
retrofit = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
retrofitConverterMoshi = { module = "com.squareup.retrofit2:converter-moshi", version.ref = "retrofit" }


constraintlayout = { group = "androidx.constraintlayout", name = "constraintlayout", version.ref = "constraintlayout" }

[bundles]
android = ["coreKtx", "appcompat", "lifecycle", "material", "startup", "worker"]
compose = ["activityCompose", "composeUI", "composeUIGraphics", "composeUIPreview", "composeNavigation"]
unitTests = ["junit", "assert", "mockk", "testCoroutines"]
uiTests = ["androidJunit", "espresso", "composeUITest"]
room = ["room", "roomCoroutines" ]
logging = ["timber", "logcat"]
hilt = ["hiltAndroid", "moshi", "hiltExtensions", "hiltNavigation"]
okhhtp = ["okhhtp", "okhhtpLoggingInterceptor", "retrofit", "retrofitConverterMoshi"]

[plugins]
android-application = { id = "com.android.application", version.ref = "gradleplugin" }
android-library = { id = "com.android.library", version.ref = "gradleplugin" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
devtools = { id = "com.google.devtools.ksp", version.ref = "devtools" }
serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "serialization" }
compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
